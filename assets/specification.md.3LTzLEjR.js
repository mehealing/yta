import{_ as s,c as a,o as n,V as i}from"./chunks/framework.xdeZM9LZ.js";const u=JSON.parse('{"title":"前端开发规范","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"specification.md","filePath":"specification.md"}'),e={name:"specification.md"},p=i(`<h1 id="前端开发规范" tabindex="-1">前端开发规范 <a class="header-anchor" href="#前端开发规范" aria-label="Permalink to &quot;前端开发规范&quot;">​</a></h1><p>本开发规范适用保趣科技前端，开发者在开发过程中应按规范开发，如有好的建议可以一起提出修改</p><h3 id="css规范" tabindex="-1">CSS规范 <a class="header-anchor" href="#css规范" aria-label="Permalink to &quot;CSS规范&quot;">​</a></h3><p>将样式写在外部样式表中，尽量避免内联样式<br> 选择器命名要有意义，使用<code>短横线连接式</code> （例如 .my-class）<br></p><h3 id="javascript规范" tabindex="-1">JavaScript规范 <a class="header-anchor" href="#javascript规范" aria-label="Permalink to &quot;JavaScript规范&quot;">​</a></h3><p>使用 <code>=== 和 !==</code> 进行比较，避免使用 == 和 !=<br> 变量声明应使用 <code>let 和 const</code> 代替 var<br> 函数参数名要有<code>意义</code>。<br> 变量和方法名命名应该为<code>小驼峰命名法</code> 例如：myFirstName<br> 常量命名应该为<code>全大写加下划线</code> 例如：FIRST_NAME<br></p><p>bad</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 坚决杜绝使用让人看了也不知道是啥的字母数字组合</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user_last_login_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要使用下划线命名变量</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只写一个list</span></span></code></pre></div><p>goods</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userLastLoginTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小驼峰可读性更高</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法名最好使用动词+名词的组合</span></span></code></pre></div><h3 id="方法名定义推荐加上动词前缀" tabindex="-1">方法名定义推荐加上动词前缀 <a class="header-anchor" href="#方法名定义推荐加上动词前缀" aria-label="Permalink to &quot;方法名定义推荐加上动词前缀&quot;">​</a></h3><ul><li>加载数据使用 <code>load</code> 前缀，例如：<code>loadUserData</code> <br></li><li>获取数据或值使用 <code>get</code> 前缀，例如： <code>getUserAvatar()</code><br></li></ul><blockquote><p>load与get的关系是load前缀的方法可以包含多个get前缀的方法，get不可以包含load前缀的方法，可以理解为要加载的数据由一或多个get前缀的方法来获取</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>设置数据或更新使用 <code>set/update</code> 前缀，例如： <code>updateUserAvatar()</code><br></li><li>格式化数据使用 <code>format</code>前缀， 例如： <code>formatUserList()</code><br></li><li>判断某种条件使用 <code>judge</code> 前缀，例如: j<code>udgeCanShowModal()</code>;<br><code>judgeIsVipUser()</code>;<code>judgeHasRecord()</code>;<br></li></ul><blockquote><p>有的同学直接使用<code>isVipUser()</code>这种命名方式，也可以，但是我更倾向于函数是一个动作，用 <code>const isVipUser = true 可以表示一个值</code>，表示一个判断动作的话还是加上前缀比较好。</p></blockquote><ul><li>监听事件或数据变化使用 <code>on</code>前缀，例如 <code>onFilterChanged()</code>; <code>onSubmitSuccess()</code>;<br></li><li>点击事件使用 <code>click/tap</code> 前缀，例如 <code>clickUserAvatar()</code>;<br></li></ul><blockquote><p>移动端开发建议使用<code>tap</code>，PC端建议使用<code>click</code> 跳转新页面使用 <code>navTo</code> 前缀，例如 <code>navToDetailPage()</code>;<br></p></blockquote><h3 id="命名风格全局要统一-有章可循" tabindex="-1">命名风格全局要统一，有章可循 <a class="header-anchor" href="#命名风格全局要统一-有章可循" aria-label="Permalink to &quot;命名风格全局要统一，有章可循&quot;">​</a></h3><p>不是非要一定按照上面的前缀来命名，只要你做到让人一眼看上去就知道这个方法是干嘛的，而且要有规律可循，你可以按自己的喜好来命名。<br> 举个例子：<br> 你知道你的某个同事喜欢用 judge 前缀来命名具有判断相关逻辑的方法，那你看他代码时一看到 judge 开头的，不用看内容只看名你就大概知道是干嘛的了，节省下来的时间干别的不香么。</p><h3 id="严格控制文件行数-最好保持在500行以下" tabindex="-1">严格控制文件行数，最好保持在500行以下 <a class="header-anchor" href="#严格控制文件行数-最好保持在500行以下" aria-label="Permalink to &quot;严格控制文件行数，最好保持在500行以下&quot;">​</a></h3><p>该拆分的拆分，文件行数过多，可维护性和可读性都很差，别说什么业务本身就很复杂，拆不出来只能说你代码组织能力差。</p><p>拆分维度根据你的需求不同而不同，但是大体的思路可以是common通用方法、utils工具方法、gateway请求方法，presenter数据处理、models数据模型（TS）等，还可以根据你的业务逻辑来拆分，总之维度很多，重点是要拆的清晰，一定要避免拆的多而杂，那样还不如不拆。</p><h3 id="严格控制代码重复率-不要图方便一味复制粘贴" tabindex="-1">严格控制代码重复率，不要图方便一味复制粘贴 <a class="header-anchor" href="#严格控制代码重复率-不要图方便一味复制粘贴" aria-label="Permalink to &quot;严格控制代码重复率，不要图方便一味复制粘贴&quot;">​</a></h3><p>代码重复率是一个团队代码质量评测一个很重要的指标，显而易见重复代码会占用更多空间，并且会增加维护的困难度，修改你复用的重复代码时很容易漏掉，要耗费额外精力去验证，所以尽量拆出你的复用逻辑，别偷懒，别给自己留坑。</p><h3 id="写注释-随手写注释-刻在骨子里-像条件反射一样" tabindex="-1">写注释，随手写注释，刻在骨子里，像条件反射一样 <a class="header-anchor" href="#写注释-随手写注释-刻在骨子里-像条件反射一样" aria-label="Permalink to &quot;写注释，随手写注释，刻在骨子里，像条件反射一样&quot;">​</a></h3><p>不多说，你自己去看看不爱写注释的那位同事的代码，感受一下，你就明白为啥注释这么重要了，或者简单点，你就看你自己没写注释的代码，一个月前两个月前的，你还能完全捋清楚当时的思路不？</p><p>方法最好都写注释，变量名等如果你觉得实习生都可以轻松看懂的部分可以不写。</p><h4 id="务必添加注释列表" tabindex="-1">务必添加注释列表 <a class="header-anchor" href="#务必添加注释列表" aria-label="Permalink to &quot;务必添加注释列表&quot;">​</a></h4><ul><li>公共组件使用说明</li><li>各组件中重要函数或者类说明</li><li>复杂的业务逻辑处理说明</li><li>特殊情况的代码处理说明,对于代码中特殊用途的变量、存在临界值、函数中使用的 hack、使用了某种算法或思路等需要进行注释描述</li><li>多重 if 判断语句</li></ul><h4 id="单行注释" tabindex="-1">单行注释 <a class="header-anchor" href="#单行注释" aria-label="Permalink to &quot;单行注释&quot;">​</a></h4><p>注释单独一行，不要在代码后的同一行内加注释。例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">”abc”; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 姓名    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // good</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 姓名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> “abc”;</span></span></code></pre></div><h4 id="多行注释" tabindex="-1">多行注释 <a class="header-anchor" href="#多行注释" aria-label="Permalink to &quot;多行注释&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件使用说明，和调用说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * 组件名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 组件存放位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@desc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 组件描述</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 组件作者</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@date</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 2017年12月05日17:22:43</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [title]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    - 参数说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [columns]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 参数说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 调用示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      *  &lt;hbTable :title=&quot;title&quot; :columns=&quot;columns&quot; :tableData=&quot;tableData&quot;&gt;&lt;/hbTable&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      **/</span></span></code></pre></div><h3 id="不要使用变量拼接会经常被全局搜索的字符串" tabindex="-1">不要使用变量拼接会经常被全局搜索的字符串 <a class="header-anchor" href="#不要使用变量拼接会经常被全局搜索的字符串" aria-label="Permalink to &quot;不要使用变量拼接会经常被全局搜索的字符串&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> defaultAvatar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`https://www.aa.com/imgs/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-avatar.png\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这样如果你想搜索哪里用到了default-avatar.png这个图片是搜不到的， 类似的还有跳转路径，埋点标识等，要格外注意。</p><h3 id="使用es6-语法-简化代码-提高效率" tabindex="-1">使用ES6+语法，简化代码，提高效率 <a class="header-anchor" href="#使用es6-语法-简化代码-提高效率" aria-label="Permalink to &quot;使用ES6+语法，简化代码，提高效率&quot;">​</a></h3><p>JavaScript语言本身也有一些令人不满意的地方，如变量提升，回调地狱等，ES6+主要是为了解决ES5的先天不足，每一次标准的诞生都意味着语言的完善，功能的加强。</p><h3 id="附-函数方法常用的动词" tabindex="-1">附： 函数方法常用的动词 <a class="header-anchor" href="#附-函数方法常用的动词" aria-label="Permalink to &quot;附： 函数方法常用的动词&quot;">​</a></h3><div class="language-base vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">base</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>get 获取/set 设置,</span></span>
<span class="line"><span>add 增加/remove 删除</span></span>
<span class="line"><span>create 创建/destory 移除</span></span>
<span class="line"><span>start 启动/stop 停止</span></span>
<span class="line"><span>open 打开/close 关闭,</span></span>
<span class="line"><span>read 读取/write 写入</span></span>
<span class="line"><span>load 载入/save 保存,</span></span>
<span class="line"><span>create 创建/destroy 销毁</span></span>
<span class="line"><span>begin 开始/end 结束,</span></span>
<span class="line"><span>backup 备份/restore 恢复</span></span>
<span class="line"><span>import 导入/export 导出,</span></span>
<span class="line"><span>split 分割/merge 合并</span></span>
<span class="line"><span>inject 注入/extract 提取,</span></span>
<span class="line"><span>attach 附着/detach 脱离</span></span>
<span class="line"><span>bind 绑定/separate 分离,</span></span>
<span class="line"><span>view 查看/browse 浏览</span></span>
<span class="line"><span>edit 编辑/modify 修改,</span></span>
<span class="line"><span>select 选取/mark 标记</span></span>
<span class="line"><span>copy 复制/paste 粘贴,</span></span>
<span class="line"><span>undo 撤销/redo 重做</span></span>
<span class="line"><span>insert 插入/delete 移除,</span></span>
<span class="line"><span>add 加入/append 添加</span></span>
<span class="line"><span>clean 清理/clear 清除,</span></span>
<span class="line"><span>index 索引/sort 排序</span></span>
<span class="line"><span>find 查找/search 搜索,</span></span>
<span class="line"><span>increase 增加/decrease 减少</span></span>
<span class="line"><span>play 播放/pause 暂停,</span></span>
<span class="line"><span>launch 启动/run 运行</span></span>
<span class="line"><span>compile 编译/execute 执行,</span></span>
<span class="line"><span>debug 调试/trace 跟踪</span></span>
<span class="line"><span>observe 观察/listen 监听,</span></span>
<span class="line"><span>build 构建/publish 发布</span></span>
<span class="line"><span>input 输入/output 输出,</span></span>
<span class="line"><span>encode 编码/decode 解码</span></span>
<span class="line"><span>encrypt 加密/decrypt 解密,</span></span>
<span class="line"><span>compress 压缩/decompress 解压缩</span></span>
<span class="line"><span>pack 打包/unpack 解包,</span></span>
<span class="line"><span>parse 解析/emit 生成</span></span>
<span class="line"><span>connect 连接/disconnect 断开,</span></span>
<span class="line"><span>send 发送/receive 接收</span></span>
<span class="line"><span>download 下载/upload 上传,</span></span>
<span class="line"><span>refresh 刷新/synchronize 同步</span></span>
<span class="line"><span>update 更新/revert 复原,</span></span>
<span class="line"><span>lock 锁定/unlock 解锁</span></span>
<span class="line"><span>check out 签出/check in 签入,</span></span>
<span class="line"><span>submit 提交/commit 交付</span></span>
<span class="line"><span>push 推/pull 拉,</span></span>
<span class="line"><span>expand 展开/collapse 折叠</span></span>
<span class="line"><span>begin 起始/end 结束,</span></span>
<span class="line"><span>start 开始/finish 完成</span></span>
<span class="line"><span>enter 进入/exit 退出,</span></span>
<span class="line"><span>abort 放弃/quit 离开</span></span>
<span class="line"><span>obsolete 废弃/depreciate 废旧,</span></span>
<span class="line"><span>collect 收集/aggregate 聚集</span></span></code></pre></div>`,42),l=[p];function t(h,c,d,k,r,o){return n(),a("div",null,l)}const y=s(e,[["render",t]]);export{u as __pageData,y as default};
